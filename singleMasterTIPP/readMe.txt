Abstract
	singleMasterTIPP is a parallel triangulation based on independent partitions. See our paper "TIPP: Parallel Delaunay Triangulation for Large-Scale Datasets" for more detail. We use C/C++ and MPI (Message Passing Interface) to implementand evaluate our algorithm on a cluster.

Dependencies
	TIPP requires an MPI installation (MPICH) on Linux system.

Description
- Single masters with one-level parallelism, working with three options.
- Option1 is uniform data or non-uniform,
- Option2 is producerConsumer or nonProducerConsumer.
- Option3 is sharedFolder or nonSharedFolder

- uniform: data points are equally distributed over the domain. Point data is generated by rbox function from qhull which is embed to TIPP sytem. The nonUniform dataset is also generated by qhull, based on North Carolina ocean map.

- producerConsumer: master process sends the tasks to worker processes until all tasks (independent partitions) have been triangulated.

- sharedFolder: a shareFolder on the master node which contains point dataset. This folder should be shared to all other processes. It means that other processes can read/write result directly to this folder. To avoid the contention from writing triangulation results, we can use Ceph Parallel Storage System.
- With nonShareFolder option, the data folder doesn't need to be shared to all nodes because the master propcess is responsible to read all data and send to worker processes or collect the triangulation results from worker processes and write the results locally.

Download, build, install, and run
- You can clone this repository or download the source code. From the top-level directory (singleMasterTIPP folder), you can build the execute code by using "make clean", then "make".
- Using shell script code (testParallel.sh, or testParallel_ProducerConsumer.sh) for experiments.
- The node IP addresses are declatred in machinefile file.
- The triangulation results are stored in *.tri files in the second folder.

For example:
./runParallel.sh 8 10000 4 1 ../dataSources ../triangulationResults 10Kvertices uniform sharedFolder
	
 + The first argument is domain size (8). It means that we divide the domain coordinates are [(0,0)-(8x8)], and the domain is partitioned into 8x8 partitions.

 + The second argument is the number of points in the domain (10000 points)
 + The third argument is the number of processes (4 processes)
 + The fourth argument is the generated option (1), it has obnly 2 values 0 or 1. 1 means to regenerate the point dataset, 0 means reuse the dataset available.
 + The fifth and sixth arguments are the data source folder (../dataSources) and triangulation results folder (../triangulationResults).
 + The seventh argument is folder name (10Kvertices). The point data located in the ../dataSources/10Kvertices/, and the triangulation results (*.tri) will be located in ../triangulationResults/10Kvertices/
 + The eightth argument is the option1 (uniform). It can be "uniform" or "nonUniform"
 + The nineth argument is the option2 (sharedFolder). It can be "sharedFolder" or "nonSharedFolder"

