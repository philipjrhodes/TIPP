#install rbox
sudo apt-get install qhull-bin

#install tetgen, texStudio, ctan(for texStudio), secpanel, kolourPaint, google chrome
using Ubuntu Software Center

#configure secpanel
Configuration-select GNOME-Nautilus in SFTP
cnguyen1@vis02.cs.olemiss.edu

#home folder
sftp://cnguyen1@turing.cs.olemiss.edu/home/cnguyen1


#install C graphic.h
http://computersolutions03.blogspot.com/2013/10/run-graphicsh-in-ubuntu.html
sudo apt-get install build-essential

sudo apt-get install libsdl-image1.2 libsdl-image1.2-dev guile-1.8 guile-1.8-dev libsdl1.2debian libart-2.0-dev libaudiofile-dev libesd0-dev libdirectfb-dev libdirectfb-extra libfreetype6-dev libxext-dev x11proto-xext-dev libfreetype6 libaa1 libaa1-dev libslang2-dev libasound2 libasound2-dev

install libgraph, download from
download.savannah.gnu.org/releases/libgraph/libgraph-1.0.2.tar.gz
cd libgraph-1.0.2
./configure
sudo make
sudo make install
sudo cp /usr/local/lib/libgraph.* /usr/lib

#install eclipse
- from the folder eclipse in Downloads folder, need only stall java in Ubuntu Software Center  (JRE)
- directly from Ubuntu Software Center (eclipse)

#install wifi for Optiplex-380
sudo apt-get install firmware-b43-installer

#to kill app
pkill -u cnguyen1

You should be able to run "ps aux | grep cnguyen1" to view all of your running processes. Every row of that output corresponds to a single process, and the second column gives the PID of each process. Looking through those, you can then run "kill <pid>" to kill one of your processes. Run the first command again to make sure it worked. If that doesn't work, you can try "kill -9 <pid" instead.

You can also use "kill -9 -1" to kill all of your processes. Note that this will kill your current session too, so you'll have to log back in after running that command. 

#others info
sudo arp-scan -d --interface = eth0
ifconfig -a

#Cloud Computing
Chameleon: kevinman, Gnoucnm68





#install valgrind, it is memory debugging about double free, check memory leaking,Segmentation fault (core dumped)
sudo apt-get install valgrind
valgrind --leak-check=full -v ./dataSplitterMain
or you can:
valgrind --leak-check=full --log-file="logfile.out" -v [your_program(and its arguments)]
note: when compile you have to use option -g

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#install and use openGL Ubuntu 14 (visualize mesh)
sudo apt-get install freeglut3 freeglut3-dev


https://github.com/glvis/glvis

http://stackoverflow.com/questions/20106258/drawing-cube-3d-using-opengl
https://blog.frankzhao.com.au/2014/04/starting-with-opengl-c/
http://www.morrowland.com/apron/tutorials/gl/gl_rotating_cube.php

////////////////example://////////////////////////

/*
 * visualize.cpp
 *
 *  Created on: Jan 11, 2016
 *      Author: kevin
 */


#include <GL/glut.h>

float ver[8][3] =
{
    {-1.0,-1.0,1.0},
    {-1.0,1.0,1.0},
    {1.0,1.0,1.0},
    {1.0,-1.0,1.0},
    {-1.0,-1.0,-1.0},
    {-1.0,1.0,-1.0},
    {1.0,1.0,-1.0},
    {1.0,-1.0,-1.0},
};

GLfloat color[8][3] =
{
    {0.0,0.0,0.0},
    {1.0,0.0,0.0},
    {1.0,1.0,0.0},
    {0.0,1.0,0.0},
    {0.0,0.0,1.0},
    {1.0,0.0,1.0},
    {1.0,1.0,1.0},
    {0.0,1.0,1.0},
};

void quad(int a,int b,int c,int d)
{
    glBegin(GL_QUADS);
    glColor3fv(color[a]);
    glVertex3fv(ver[a]);

    glColor3fv(color[b]);
    glVertex3fv(ver[b]);

    glColor3fv(color[c]);
    glVertex3fv(ver[c]);

    glColor3fv(color[d]);
    glVertex3fv(ver[d]);
    glEnd();
}

void colorcube()
{
    quad(0,3,2,1);
    quad(2,3,7,6);
    quad(0,4,7,3);
    quad(1,2,6,5);
    quad(4,5,6,7);
    quad(0,1,5,4);
}

double rotate_y = 0;
double rotate_x = 0;
void specialKeys( int key, int x, int y )
{
    if (key == GLUT_KEY_RIGHT)
        rotate_y += 5;
    else if (key == GLUT_KEY_LEFT)
        rotate_y -= 5;
    else if (key == GLUT_KEY_UP)
        rotate_x += 5;
    else if (key == GLUT_KEY_DOWN)
        rotate_x -= 5;
    glutPostRedisplay();
}

void display()
{
    glClearColor( 0, 0, 0, 1 );
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    glMatrixMode( GL_PROJECTION );
    glLoadIdentity();
    int w = glutGet( GLUT_WINDOW_WIDTH );
    int h = glutGet( GLUT_WINDOW_HEIGHT );
    gluPerspective( 60, w / h, 0.1, 100 );

    glMatrixMode( GL_MODELVIEW );
    glLoadIdentity();
    gluLookAt
        (
        3, 3, 3,
        0, 0, 0,
        0, 0, 1
        );

    glRotatef( rotate_x, 1.0, 0.0, 0.0 );
    glRotatef( rotate_y, 0.0, 1.0, 0.0 );
    colorcube();

    glutSwapBuffers();
}

int main( int argc, char **argv )
{
    glutInit( &argc, argv );
    glutInitDisplayMode( GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE );
    glutInitWindowSize( 640, 480 );
    glutCreateWindow( "GLUT" );
    glutDisplayFunc( display );
    glutSpecialFunc( specialKeys );
    glEnable( GL_DEPTH_TEST );
    glutMainLoop();
    return 0;
}

//////////////////////#compile://////////////////////////////
g++ visualize.cpp -o test -lglut -lGLU -lGL

/////////////////drawCube///////////////////////////
int DrawGLScene(GLvoid)		// Here's Where We Do All The Drawing
{
    // Clear Screen And Depth Buffer
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // Reset The Current Modelview Matrix
    glLoadIdentity();

//NEW//////////////////NEW//////////////////NEW//////////////////NEW/////////////

  glTranslatef(0.0f, 0.0f,-7.0f);	// Translate Into The Screen 7.0 Units
  glRotatef(rotqube,0.0f,1.0f,0.0f);	// Rotate The cube around the Y axis
  glRotatef(rotqube,1.0f,1.0f,1.0f);
  glBegin(GL_QUADS);		// Draw The Cube Using quads
    glColor3f(0.0f,1.0f,0.0f);	// Color Blue
    glVertex3f( 1.0f, 1.0f,-1.0f);	// Top Right Of The Quad (Top)
    glVertex3f(-1.0f, 1.0f,-1.0f);	// Top Left Of The Quad (Top)
    glVertex3f(-1.0f, 1.0f, 1.0f);	// Bottom Left Of The Quad (Top)
    glVertex3f( 1.0f, 1.0f, 1.0f);	// Bottom Right Of The Quad (Top)
    glColor3f(1.0f,0.5f,0.0f);	// Color Orange
    glVertex3f( 1.0f,-1.0f, 1.0f);	// Top Right Of The Quad (Bottom)
    glVertex3f(-1.0f,-1.0f, 1.0f);	// Top Left Of The Quad (Bottom)
    glVertex3f(-1.0f,-1.0f,-1.0f);	// Bottom Left Of The Quad (Bottom)
    glVertex3f( 1.0f,-1.0f,-1.0f);	// Bottom Right Of The Quad (Bottom)
    glColor3f(1.0f,0.0f,0.0f);	// Color Red	
    glVertex3f( 1.0f, 1.0f, 1.0f);	// Top Right Of The Quad (Front)
    glVertex3f(-1.0f, 1.0f, 1.0f);	// Top Left Of The Quad (Front)
    glVertex3f(-1.0f,-1.0f, 1.0f);	// Bottom Left Of The Quad (Front)
    glVertex3f( 1.0f,-1.0f, 1.0f);	// Bottom Right Of The Quad (Front)
    glColor3f(1.0f,1.0f,0.0f);	// Color Yellow
    glVertex3f( 1.0f,-1.0f,-1.0f);	// Top Right Of The Quad (Back)
    glVertex3f(-1.0f,-1.0f,-1.0f);	// Top Left Of The Quad (Back)
    glVertex3f(-1.0f, 1.0f,-1.0f);	// Bottom Left Of The Quad (Back)
    glVertex3f( 1.0f, 1.0f,-1.0f);	// Bottom Right Of The Quad (Back)
    glColor3f(0.0f,0.0f,1.0f);	// Color Blue
    glVertex3f(-1.0f, 1.0f, 1.0f);	// Top Right Of The Quad (Left)
    glVertex3f(-1.0f, 1.0f,-1.0f);	// Top Left Of The Quad (Left)
    glVertex3f(-1.0f,-1.0f,-1.0f);	// Bottom Left Of The Quad (Left)
    glVertex3f(-1.0f,-1.0f, 1.0f);	// Bottom Right Of The Quad (Left)
    glColor3f(1.0f,0.0f,1.0f);	// Color Violet
    glVertex3f( 1.0f, 1.0f,-1.0f);	// Top Right Of The Quad (Right)
    glVertex3f( 1.0f, 1.0f, 1.0f);	// Top Left Of The Quad (Right)
    glVertex3f( 1.0f,-1.0f, 1.0f);	// Bottom Left Of The Quad (Right)
    glVertex3f( 1.0f,-1.0f,-1.0f);	// Bottom Right Of The Quad (Right)
  glEnd();			// End Drawing The Cube

  rotqube +=0.9f;			// Increase Angle

//NEW//////////////////NEW//////////////////NEW//////////////////NEW/////////////

    return TRUE;			// Keep Going
}


