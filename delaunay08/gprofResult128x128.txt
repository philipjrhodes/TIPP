Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.01      2.08     2.08 425619330     0.00     0.01  triangle::circumCircleContains(point)
 16.35      2.76     0.68    24572    27.68   159.38  domain::basicTriangulate(point)
 11.90      3.26     0.50 458472286     0.00     0.00  point::point(point const&)
  7.57      3.57     0.32 429037910     0.00     0.00  point::getY()
  6.13      3.83     0.26 429038500     0.00     0.00  point::getX()
  1.92      3.91     0.08    62997     1.27     1.28  triangle::triangle(triangle const&)
  1.44      3.97     0.06 13204094     0.00     0.01  edge::operator==(edge const&)
  0.96      4.01     0.04                             point::set(point)
  0.96      4.05     0.04                             domain::updateConflictPartitions()
  0.72      4.08     0.03 29414980     0.00     0.00  point::operator==(point)
  0.48      4.10     0.02                             domain::generateActivePartitions()
  0.24      4.11     0.01  2383325     0.00     0.00  point::point()
  0.24      4.12     0.01    62997     0.16     0.18  domain::mapLow(boundingBox, double, double)
  0.24      4.13     0.01                             domain::deliverTriangles()
  0.24      4.14     0.01                             domain::triangleTransform()
  0.24      4.15     0.01                             domain::processDelaunayMPI(int)
  0.24      4.16     0.01                             domain::generateConflictPartitions()
  0.12      4.16     0.01   377418     0.01     0.01  point::point(double, double)
  0.00      4.16     0.00   910262     0.00     0.00  boundingBox::getLowPoint()
  0.00      4.16     0.00   785816     0.00     0.00  boundingBox::getHighPoint()
  0.00      4.16     0.00   583721     0.00     0.00  insertFront(edgeNode*&, edgeNode*)
  0.00      4.16     0.00   583721     0.00     0.00  createNewNode(edge*)
  0.00      4.16     0.00   503976     0.00     0.00  gridElement::gridElement(gridElement const&)
  0.00      4.16     0.00   396001     0.00     0.00  triangle::computeCenterRadius()
  0.00      4.16     0.00   375111     0.00     0.01  edge::edge(point const&, point const&)
  0.00      4.16     0.00   338390     0.00     0.00  point::setX(double)
  0.00      4.16     0.00   338390     0.00     0.00  point::setY(double)
  0.00      4.16     0.00   208610     0.00     0.00  removeNode(edgeNode*&, edgeNode*&, edgeNode*&)
  0.00      4.16     0.00   208610     0.00     0.01  edge::edge(edge const&)
  0.00      4.16     0.00   166503     0.00     0.01  triangle::triangle(point const&, point const&, point const&)
  0.00      4.16     0.00   166501     0.00     0.00  triangle::colinear()
  0.00      4.16     0.00   166251     0.00     0.00  insertFront(triangleNode*&, triangleNode*)
  0.00      4.16     0.00   166249     0.00     0.00  createNewNode(triangle*)
  0.00      4.16     0.00   166249     0.00     0.00  triangle::isBad()
  0.00      4.16     0.00   156908     0.00     0.01  boundingBox::boundingBox(double, double, double, double)
  0.00      4.16     0.00   156908     0.00     0.04  triangle::intersect(boundingBox)
  0.00      4.16     0.00   125994     0.00     0.00  gridElement::getX()
  0.00      4.16     0.00   125994     0.00     0.00  gridElement::getY()
  0.00      4.16     0.00   125994     0.00     0.00  gridElement::gridElement(int, int)
  0.00      4.16     0.00   125994     0.00     0.00  gridBound::getLowGridElement()
  0.00      4.16     0.00   125994     0.00     0.00  gridBound::getHighGridElement()
  0.00      4.16     0.00   125037     0.00     0.00  removeNode(triangleNode*&, triangleNode*&, triangleNode*&)
  0.00      4.16     0.00   125037     0.00     0.01  triangle::getEdge1()
  0.00      4.16     0.00   125037     0.00     0.01  triangle::getEdge2()
  0.00      4.16     0.00   125037     0.00     0.01  triangle::getEdge3()
  0.00      4.16     0.00   123642     0.00     0.00  point::getId()
  0.00      4.16     0.00    62997     0.00     0.00  boundingBox::boundingBox(point, point)
  0.00      4.16     0.00    62997     0.00     0.20  domain::boundingGrid(boundingBox)
  0.00      4.16     0.00    62997     0.00     0.01  domain::mapHigh(boundingBox, double, double)
  0.00      4.16     0.00    62997     0.00     0.00  gridBound::gridBound(gridElement, gridElement)
  0.00      4.16     0.00    49144     0.00     0.00  removeLinkList(edgeNode*&)
  0.00      4.16     0.00    24576     0.00     0.00  std::list<unsigned int, std::allocator<unsigned int> >::sort()
  0.00      4.16     0.00    24572     0.00     0.00  point::setId(unsigned long long)
  0.00      4.16     0.00     4096     0.00     0.00  partition::partition()
  0.00      4.16     0.00     4096     0.00     0.00  partition::~partition()
  0.00      4.16     0.00     4096     0.00     0.00  std::list<unsigned int, std::allocator<unsigned int> >::operator=(std::list<unsigned int, std::allocator<unsigned int> > const&)
  0.00      4.16     0.00     4096     0.00     0.00  std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)
  0.00      4.16     0.00       24     0.00     0.00  GetWallClockTime()
  0.00      4.16     0.00       24     0.00     0.00  domain::addFile(std::string, std::string, std::string)
  0.00      4.16     0.00       12     0.00     0.00  domain::runDelaunayMPI(int)
  0.00      4.16     0.00       12     0.00    13.69  domain::storeActiveParitions(int*, int, unsigned int)
  0.00      4.16     0.00       12     0.00     0.00  domain::collectStoreTriangleIds()
  0.00      4.16     0.00       12     0.00     0.00  domain::storeActiveParitionInfo(int, int*, int*, int*)
  0.00      4.16     0.00       12     0.00     0.00  std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  0.00      4.16     0.00        7     0.00     0.00  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
  0.00      4.16     0.00        6     0.00     0.00  point::point(double, double, unsigned long long)
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z13createNewNodeP4edge
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN11boundingBoxC2E5pointS0_
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN4edgeC2ERK5pointS2_
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN5pointC2Eddy
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6domainC2EddddSs
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN9gridBoundC2E11gridElementS0_
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN9partitionC2Ev
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I_main
  0.00      4.16     0.00        1     0.00     0.00  _GLOBAL__sub_I_max
  0.00      4.16     0.00        1     0.00     0.00  size(triangleNode*)
  0.00      4.16     0.00        1     0.00     0.00  boundingBox::setLowPoint(point)
  0.00      4.16     0.00        1     0.00     0.00  boundingBox::setHighPoint(point)
  0.00      4.16     0.00        1     0.00     0.00  domain::readPointPartFileInfo()

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.24% of 4.16 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     94.1    0.00    3.92                 domain::initTriangulate() [1]
                0.68    3.24   24572/24572       domain::basicTriangulate(point) [2]
                0.00    0.00   24572/2383325     point::point() [18]
                0.00    0.00   45052/458472286     point::point(point const&) [4]
                0.00    0.00   20480/429037910     point::getY() [5]
                0.00    0.00   20480/429038500     point::getX() [6]
                0.00    0.00   24572/338390      point::setX(double) [49]
                0.00    0.00   24572/338390      point::setY(double) [50]
                0.00    0.00   24572/24572       point::setId(unsigned long long) [65]
-----------------------------------------------
                0.68    3.24   24572/24572       domain::initTriangulate() [1]
[2]     94.1    0.68    3.24   24572         domain::basicTriangulate(point) [2]
                2.08    0.57 425619330/425619330     triangle::circumCircleContains(point) [3]
                0.46    0.00 425619330/458472286     point::point(point const&) [4]
                0.06    0.06 13204094/13204094     edge::operator==(edge const&) [7]
                0.00    0.00  166501/166503      triangle::triangle(point const&, point const&, point const&) [24]
                0.00    0.00  208610/208610      edge::edge(edge const&) [25]
                0.00    0.00  333002/396001      triangle::computeCenterRadius() [26]
                0.00    0.00  125037/125037      triangle::getEdge1() [28]
                0.00    0.00  125037/125037      triangle::getEdge2() [29]
                0.00    0.00  125037/125037      triangle::getEdge3() [30]
                0.00    0.00  166501/166501      triangle::colinear() [33]
                0.00    0.00  583721/583721      createNewNode(edge*) [47]
                0.00    0.00  583721/583721      insertFront(edgeNode*&, edgeNode*) [46]
                0.00    0.00  208610/208610      removeNode(edgeNode*&, edgeNode*&, edgeNode*&) [51]
                0.00    0.00  166249/166249      triangle::isBad() [54]
                0.00    0.00  166249/166249      createNewNode(triangle*) [53]
                0.00    0.00  166249/166251      insertFront(triangleNode*&, triangleNode*) [52]
                0.00    0.00  125037/125037      removeNode(triangleNode*&, triangleNode*&, triangleNode*&) [60]
                0.00    0.00   49144/49144       removeLinkList(edgeNode*&) [63]
-----------------------------------------------
                2.08    0.57 425619330/425619330     domain::basicTriangulate(point) [2]
[3]     63.6    2.08    0.57 425619330         triangle::circumCircleContains(point) [3]
                0.31    0.00 425619330/429037910     point::getY() [5]
                0.25    0.00 425619330/429038500     point::getX() [6]
-----------------------------------------------
                0.00    0.00   45052/458472286     domain::initTriangulate() [1]
                0.00    0.00   62997/458472286     boundingBox::boundingBox(point, point) [37]
                0.00    0.00  251988/458472286     domain::boundingGrid(boundingBox) [14]
                0.00    0.00  502807/458472286     domain::generateIntersection() [8]
                0.00    0.00  785816/458472286     boundingBox::getHighPoint() [32]
                0.00    0.00  879054/458472286     triangle::intersect(boundingBox) [21]
                0.00    0.00  910262/458472286     boundingBox::getLowPoint() [31]
                0.03    0.00 29414980/458472286     edge::operator==(edge const&) [7]
                0.46    0.00 425619330/458472286     domain::basicTriangulate(point) [2]
[4]     11.9    0.50    0.00 458472286         point::point(point const&) [4]
-----------------------------------------------
                0.00    0.00      18/429037910     domain::generateIntersection() [8]
                0.00    0.00   20480/429037910     domain::initTriangulate() [1]
                0.00    0.00  123642/429037910     domain::storeActiveParitions(int*, int, unsigned int) [36]
                0.00    0.00  125994/429037910     domain::boundingGrid(boundingBox) [14]
                0.00    0.00  188271/429037910     domain::mapHigh(boundingBox, double, double) [34]
                0.00    0.00  376816/429037910     domain::mapLow(boundingBox, double, double) [15]
                0.00    0.00  499503/429037910     triangle::colinear() [33]
                0.00    0.00  895853/429037910     triangle::intersect(boundingBox) [21]
                0.00    0.00 1188003/429037910     triangle::computeCenterRadius() [26]
                0.31    0.00 425619330/429037910     triangle::circumCircleContains(point) [3]
[5]      7.6    0.32    0.00 429037910         point::getY() [5]
-----------------------------------------------
                0.00    0.00      18/429038500     domain::generateIntersection() [8]
                0.00    0.00   20480/429038500     domain::initTriangulate() [1]
                0.00    0.00  123642/429038500     domain::storeActiveParitions(int*, int, unsigned int) [36]
                0.00    0.00  125994/429038500     domain::boundingGrid(boundingBox) [14]
                0.00    0.00  188151/429038500     domain::mapHigh(boundingBox, double, double) [34]
                0.00    0.00  377000/429038500     domain::mapLow(boundingBox, double, double) [15]
                0.00    0.00  499503/429038500     triangle::colinear() [33]
                0.00    0.00  896379/429038500     triangle::intersect(boundingBox) [21]
                0.00    0.00 1188003/429038500     triangle::computeCenterRadius() [26]
                0.25    0.00 425619330/429038500     triangle::circumCircleContains(point) [3]
[6]      6.1    0.26    0.00 429038500         point::getX() [6]
-----------------------------------------------
                0.06    0.06 13204094/13204094     domain::basicTriangulate(point) [2]
[7]      2.9    0.06    0.06 13204094         edge::operator==(edge const&) [7]
                0.03    0.00 29414980/458472286     point::point(point const&) [4]
                0.03    0.00 29414980/29414980     point::operator==(point) [12]
-----------------------------------------------
                                                 <spontaneous>
[8]      2.5    0.00    0.10                 domain::generateIntersection() [8]
                0.08    0.00   62997/62997       triangle::triangle(triangle const&) [9]
                0.00    0.01   62997/62997       domain::boundingGrid(boundingBox) [14]
                0.00    0.01  156908/156908      triangle::intersect(boundingBox) [21]
                0.00    0.00  125994/377418      point::point(double, double) [22]
                0.00    0.00  156908/156908      boundingBox::boundingBox(double, double, double, double) [27]
                0.00    0.00  502807/458472286     point::point(point const&) [4]
                0.00    0.00   62997/396001      triangle::computeCenterRadius() [26]
                0.00    0.00   62997/62997       boundingBox::boundingBox(point, point) [37]
                0.00    0.00      24/910262      boundingBox::getLowPoint() [31]
                0.00    0.00      18/429037910     point::getY() [5]
                0.00    0.00      12/785816      boundingBox::getHighPoint() [32]
                0.00    0.00      18/429038500     point::getX() [6]
                0.00    0.00  156908/338390      point::setY(double) [50]
                0.00    0.00  125994/125994      gridBound::getLowGridElement() [58]
                0.00    0.00  125994/125994      gridElement::getX() [55]
                0.00    0.00  125994/125994      gridElement::getY() [56]
                0.00    0.00  125994/125994      gridBound::getHighGridElement() [59]
-----------------------------------------------
                0.08    0.00   62997/62997       domain::generateIntersection() [8]
[9]      1.9    0.08    0.00   62997         triangle::triangle(triangle const&) [9]
                0.00    0.00  188991/2383325     point::point() [18]
-----------------------------------------------
                                                 <spontaneous>
[10]     1.0    0.04    0.00                 point::set(point) [10]
-----------------------------------------------
                                                 <spontaneous>
[11]     1.0    0.04    0.00                 domain::updateConflictPartitions() [11]
-----------------------------------------------
                0.03    0.00 29414980/29414980     edge::operator==(edge const&) [7]
[12]     0.7    0.03    0.00 29414980         point::operator==(point) [12]
-----------------------------------------------
                                                 <spontaneous>
[13]     0.5    0.02    0.00                 domain::generateActivePartitions() [13]
                0.00    0.00    4096/4096        std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&) [69]
-----------------------------------------------
                0.00    0.01   62997/62997       domain::generateIntersection() [8]
[14]     0.3    0.00    0.01   62997         domain::boundingGrid(boundingBox) [14]
                0.01    0.00   62997/62997       domain::mapLow(boundingBox, double, double) [15]
                0.00    0.00   62997/62997       domain::mapHigh(boundingBox, double, double) [34]
                0.00    0.00  251988/458472286     point::point(point const&) [4]
                0.00    0.00  125994/910262      boundingBox::getLowPoint() [31]
                0.00    0.00  125994/785816      boundingBox::getHighPoint() [32]
                0.00    0.00  125994/429037910     point::getY() [5]
                0.00    0.00  125994/429038500     point::getX() [6]
                0.00    0.00  188991/503976      gridElement::gridElement(gridElement const&) [48]
                0.00    0.00   62997/62997       gridBound::gridBound(gridElement, gridElement) [62]
-----------------------------------------------
                0.01    0.00   62997/62997       domain::boundingGrid(boundingBox) [14]
[15]     0.3    0.01    0.00   62997         domain::mapLow(boundingBox, double, double) [15]
                0.00    0.00  502902/785816      boundingBox::getHighPoint() [32]
                0.00    0.00  376816/429037910     point::getY() [5]
                0.00    0.00  250914/910262      boundingBox::getLowPoint() [31]
                0.00    0.00  377000/429038500     point::getX() [6]
                0.00    0.00   62997/125994      gridElement::gridElement(int, int) [57]
-----------------------------------------------
                                                 <spontaneous>
[16]     0.3    0.01    0.00                 domain::triangleTransform() [16]
                0.00    0.00  123642/2383325     point::point() [18]
                0.00    0.00       1/1           size(triangleNode*) [87]
-----------------------------------------------
                                                 <spontaneous>
[17]     0.2    0.01    0.00                 domain::processDelaunayMPI(int) [17]
                0.00    0.00      12/12          domain::storeActiveParitions(int*, int, unsigned int) [36]
                0.00    0.00    4096/4096        std::list<unsigned int, std::allocator<unsigned int> >::operator=(std::list<unsigned int, std::allocator<unsigned int> > const&) [68]
                0.00    0.00      24/24          GetWallClockTime() [70]
                0.00    0.00      24/24          domain::addFile(std::string, std::string, std::string) [71]
                0.00    0.00      12/12          domain::storeActiveParitionInfo(int, int*, int*, int*) [74]
                0.00    0.00      12/12          domain::runDelaunayMPI(int) [72]
                0.00    0.00      12/12          domain::collectStoreTriangleIds() [73]
-----------------------------------------------
                0.00    0.00       4/2383325     domain::domain(double, double, double, double, std::string) [38]
                0.00    0.00   24572/2383325     domain::initTriangulate() [1]
                0.00    0.00   65349/2383325     domain::updateTriangleArr() [35]
                0.00    0.00  123642/2383325     domain::triangleTransform() [16]
                0.00    0.00  188991/2383325     triangle::triangle(triangle const&) [9]
                0.00    0.00  313816/2383325     boundingBox::boundingBox(double, double, double, double) [27]
                0.00    0.00  417220/2383325     edge::edge(edge const&) [25]
                0.00    0.00  499509/2383325     triangle::triangle(point const&, point const&, point const&) [24]
                0.00    0.00  750222/2383325     edge::edge(point const&, point const&) [23]
[18]     0.2    0.01    0.00 2383325         point::point() [18]
-----------------------------------------------
                                                 <spontaneous>
[19]     0.2    0.01    0.00                 domain::deliverTriangles() [19]
-----------------------------------------------
                                                 <spontaneous>
[20]     0.2    0.01    0.00                 domain::generateConflictPartitions() [20]
                0.00    0.00   24576/24576       std::list<unsigned int, std::allocator<unsigned int> >::sort() [64]
-----------------------------------------------
                0.00    0.01  156908/156908      domain::generateIntersection() [8]
[21]     0.1    0.00    0.01  156908         triangle::intersect(boundingBox) [21]
                0.00    0.00  251422/377418      point::point(double, double) [22]
                0.00    0.00  879054/458472286     point::point(point const&) [4]
                0.00    0.00  895853/429037910     point::getY() [5]
                0.00    0.00  896379/429038500     point::getX() [6]
                0.00    0.00  156908/910262      boundingBox::getLowPoint() [31]
                0.00    0.00  156908/785816      boundingBox::getHighPoint() [32]
-----------------------------------------------
                0.00    0.00       2/377418      domain::domain(double, double, double, double, std::string) [38]
                0.00    0.00  125994/377418      domain::generateIntersection() [8]
                0.00    0.00  251422/377418      triangle::intersect(boundingBox) [21]
[22]     0.1    0.01    0.00  377418         point::point(double, double) [22]
-----------------------------------------------
                0.00    0.00  125037/375111      triangle::getEdge1() [28]
                0.00    0.00  125037/375111      triangle::getEdge2() [29]
                0.00    0.00  125037/375111      triangle::getEdge3() [30]
[23]     0.1    0.00    0.00  375111         edge::edge(point const&, point const&) [23]
                0.00    0.00  750222/2383325     point::point() [18]
-----------------------------------------------
                0.00    0.00       2/166503      domain::domain(double, double, double, double, std::string) [38]
                0.00    0.00  166501/166503      domain::basicTriangulate(point) [2]
[24]     0.1    0.00    0.00  166503         triangle::triangle(point const&, point const&, point const&) [24]
                0.00    0.00  499509/2383325     point::point() [18]
-----------------------------------------------
                0.00    0.00  208610/208610      domain::basicTriangulate(point) [2]
[25]     0.0    0.00    0.00  208610         edge::edge(edge const&) [25]
                0.00    0.00  417220/2383325     point::point() [18]
-----------------------------------------------
                0.00    0.00       2/396001      domain::domain(double, double, double, double, std::string) [38]
                0.00    0.00   62997/396001      domain::generateIntersection() [8]
                0.00    0.00  333002/396001      domain::basicTriangulate(point) [2]
[26]     0.0    0.00    0.00  396001         triangle::computeCenterRadius() [26]
                0.00    0.00 1188003/429037910     point::getY() [5]
                0.00    0.00 1188003/429038500     point::getX() [6]
-----------------------------------------------
                0.00    0.00  156908/156908      domain::generateIntersection() [8]
[27]     0.0    0.00    0.00  156908         boundingBox::boundingBox(double, double, double, double) [27]
                0.00    0.00  313816/2383325     point::point() [18]
                0.00    0.00  313816/338390      point::setX(double) [49]
                0.00    0.00  156908/338390      point::setY(double) [50]
-----------------------------------------------
                0.00    0.00  125037/125037      domain::basicTriangulate(point) [2]
[28]     0.0    0.00    0.00  125037         triangle::getEdge1() [28]
                0.00    0.00  125037/375111      edge::edge(point const&, point const&) [23]
-----------------------------------------------
                0.00    0.00  125037/125037      domain::basicTriangulate(point) [2]
[29]     0.0    0.00    0.00  125037         triangle::getEdge2() [29]
                0.00    0.00  125037/375111      edge::edge(point const&, point const&) [23]
-----------------------------------------------
                0.00    0.00  125037/125037      domain::basicTriangulate(point) [2]
[30]     0.0    0.00    0.00  125037         triangle::getEdge3() [30]
                0.00    0.00  125037/375111      edge::edge(point const&, point const&) [23]
-----------------------------------------------
                0.00    0.00      24/910262      domain::generateIntersection() [8]
                0.00    0.00  125994/910262      domain::boundingGrid(boundingBox) [14]
                0.00    0.00  156908/910262      triangle::intersect(boundingBox) [21]
                0.00    0.00  250914/910262      domain::mapLow(boundingBox, double, double) [15]
                0.00    0.00  376422/910262      domain::mapHigh(boundingBox, double, double) [34]
[31]     0.0    0.00    0.00  910262         boundingBox::getLowPoint() [31]
                0.00    0.00  910262/458472286     point::point(point const&) [4]
-----------------------------------------------
                0.00    0.00      12/785816      domain::generateIntersection() [8]
                0.00    0.00  125994/785816      domain::boundingGrid(boundingBox) [14]
                0.00    0.00  156908/785816      triangle::intersect(boundingBox) [21]
                0.00    0.00  502902/785816      domain::mapLow(boundingBox, double, double) [15]
[32]     0.0    0.00    0.00  785816         boundingBox::getHighPoint() [32]
                0.00    0.00  785816/458472286     point::point(point const&) [4]
-----------------------------------------------
                0.00    0.00  166501/166501      domain::basicTriangulate(point) [2]
[33]     0.0    0.00    0.00  166501         triangle::colinear() [33]
                0.00    0.00  499503/429037910     point::getY() [5]
                0.00    0.00  499503/429038500     point::getX() [6]
-----------------------------------------------
                0.00    0.00   62997/62997       domain::boundingGrid(boundingBox) [14]
[34]     0.0    0.00    0.00   62997         domain::mapHigh(boundingBox, double, double) [34]
                0.00    0.00  376422/910262      boundingBox::getLowPoint() [31]
                0.00    0.00  188271/429037910     point::getY() [5]
                0.00    0.00  188151/429038500     point::getX() [6]
                0.00    0.00   62997/125994      gridElement::gridElement(int, int) [57]
-----------------------------------------------
                                                 <spontaneous>
[35]     0.0    0.00    0.00                 domain::updateTriangleArr() [35]
                0.00    0.00   65349/2383325     point::point() [18]
                0.00    0.00       6/7           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [76]
-----------------------------------------------
                0.00    0.00      12/12          domain::processDelaunayMPI(int) [17]
[36]     0.0    0.00    0.00      12         domain::storeActiveParitions(int*, int, unsigned int) [36]
                0.00    0.00  123642/429037910     point::getY() [5]
                0.00    0.00  123642/429038500     point::getX() [6]
                0.00    0.00  123642/123642      point::getId() [61]
-----------------------------------------------
                0.00    0.00   62997/62997       domain::generateIntersection() [8]
[37]     0.0    0.00    0.00   62997         boundingBox::boundingBox(point, point) [37]
                0.00    0.00   62997/458472286     point::point(point const&) [4]
-----------------------------------------------
                                                 <spontaneous>
[38]     0.0    0.00    0.00                 domain::domain(double, double, double, double, std::string) [38]
                0.00    0.00       2/377418      point::point(double, double) [22]
                0.00    0.00       2/166503      triangle::triangle(point const&, point const&, point const&) [24]
                0.00    0.00       4/2383325     point::point() [18]
                0.00    0.00       2/396001      triangle::computeCenterRadius() [26]
                0.00    0.00    4096/4096        partition::partition() [66]
                0.00    0.00       6/6           point::point(double, double, unsigned long long) [77]
                0.00    0.00       2/338390      point::setX(double) [49]
                0.00    0.00       2/338390      point::setY(double) [50]
                0.00    0.00       2/166251      insertFront(triangleNode*&, triangleNode*) [52]
                0.00    0.00       1/1           boundingBox::setLowPoint(point) [88]
                0.00    0.00       1/1           boundingBox::setHighPoint(point) [89]
                0.00    0.00       1/1           domain::readPointPartFileInfo() [90]
-----------------------------------------------
                0.00    0.00  583721/583721      domain::basicTriangulate(point) [2]
[46]     0.0    0.00    0.00  583721         insertFront(edgeNode*&, edgeNode*) [46]
-----------------------------------------------
                0.00    0.00  583721/583721      domain::basicTriangulate(point) [2]
[47]     0.0    0.00    0.00  583721         createNewNode(edge*) [47]
-----------------------------------------------
                0.00    0.00   62997/503976      gridBound::gridBound(gridElement, gridElement) [62]
                0.00    0.00  125994/503976      gridBound::getLowGridElement() [58]
                0.00    0.00  125994/503976      gridBound::getHighGridElement() [59]
                0.00    0.00  188991/503976      domain::boundingGrid(boundingBox) [14]
[48]     0.0    0.00    0.00  503976         gridElement::gridElement(gridElement const&) [48]
-----------------------------------------------
                0.00    0.00       2/338390      domain::domain(double, double, double, double, std::string) [38]
                0.00    0.00   24572/338390      domain::initTriangulate() [1]
                0.00    0.00  313816/338390      boundingBox::boundingBox(double, double, double, double) [27]
[49]     0.0    0.00    0.00  338390         point::setX(double) [49]
-----------------------------------------------
                0.00    0.00       2/338390      domain::domain(double, double, double, double, std::string) [38]
                0.00    0.00   24572/338390      domain::initTriangulate() [1]
                0.00    0.00  156908/338390      boundingBox::boundingBox(double, double, double, double) [27]
                0.00    0.00  156908/338390      domain::generateIntersection() [8]
[50]     0.0    0.00    0.00  338390         point::setY(double) [50]
-----------------------------------------------
                0.00    0.00  208610/208610      domain::basicTriangulate(point) [2]
[51]     0.0    0.00    0.00  208610         removeNode(edgeNode*&, edgeNode*&, edgeNode*&) [51]
-----------------------------------------------
                0.00    0.00       2/166251      domain::domain(double, double, double, double, std::string) [38]
                0.00    0.00  166249/166251      domain::basicTriangulate(point) [2]
[52]     0.0    0.00    0.00  166251         insertFront(triangleNode*&, triangleNode*) [52]
-----------------------------------------------
                0.00    0.00  166249/166249      domain::basicTriangulate(point) [2]
[53]     0.0    0.00    0.00  166249         createNewNode(triangle*) [53]
-----------------------------------------------
                0.00    0.00  166249/166249      domain::basicTriangulate(point) [2]
[54]     0.0    0.00    0.00  166249         triangle::isBad() [54]
-----------------------------------------------
                0.00    0.00  125994/125994      domain::generateIntersection() [8]
[55]     0.0    0.00    0.00  125994         gridElement::getX() [55]
-----------------------------------------------
                0.00    0.00  125994/125994      domain::generateIntersection() [8]
[56]     0.0    0.00    0.00  125994         gridElement::getY() [56]
-----------------------------------------------
                0.00    0.00   62997/125994      domain::mapHigh(boundingBox, double, double) [34]
                0.00    0.00   62997/125994      domain::mapLow(boundingBox, double, double) [15]
[57]     0.0    0.00    0.00  125994         gridElement::gridElement(int, int) [57]
-----------------------------------------------
                0.00    0.00  125994/125994      domain::generateIntersection() [8]
[58]     0.0    0.00    0.00  125994         gridBound::getLowGridElement() [58]
                0.00    0.00  125994/503976      gridElement::gridElement(gridElement const&) [48]
-----------------------------------------------
                0.00    0.00  125994/125994      domain::generateIntersection() [8]
[59]     0.0    0.00    0.00  125994         gridBound::getHighGridElement() [59]
                0.00    0.00  125994/503976      gridElement::gridElement(gridElement const&) [48]
-----------------------------------------------
                0.00    0.00  125037/125037      domain::basicTriangulate(point) [2]
[60]     0.0    0.00    0.00  125037         removeNode(triangleNode*&, triangleNode*&, triangleNode*&) [60]
-----------------------------------------------
                0.00    0.00  123642/123642      domain::storeActiveParitions(int*, int, unsigned int) [36]
[61]     0.0    0.00    0.00  123642         point::getId() [61]
-----------------------------------------------
                0.00    0.00   62997/62997       domain::boundingGrid(boundingBox) [14]
[62]     0.0    0.00    0.00   62997         gridBound::gridBound(gridElement, gridElement) [62]
                0.00    0.00   62997/503976      gridElement::gridElement(gridElement const&) [48]
-----------------------------------------------
                0.00    0.00   49144/49144       domain::basicTriangulate(point) [2]
[63]     0.0    0.00    0.00   49144         removeLinkList(edgeNode*&) [63]
-----------------------------------------------
                0.00    0.00   24576/24576       domain::generateConflictPartitions() [20]
[64]     0.0    0.00    0.00   24576         std::list<unsigned int, std::allocator<unsigned int> >::sort() [64]
-----------------------------------------------
                0.00    0.00   24572/24572       domain::initTriangulate() [1]
[65]     0.0    0.00    0.00   24572         point::setId(unsigned long long) [65]
-----------------------------------------------
                0.00    0.00    4096/4096        domain::domain(double, double, double, double, std::string) [38]
[66]     0.0    0.00    0.00    4096         partition::partition() [66]
-----------------------------------------------
                0.00    0.00    4096/4096        domain::~domain() [123]
[67]     0.0    0.00    0.00    4096         partition::~partition() [67]
-----------------------------------------------
                0.00    0.00    4096/4096        domain::processDelaunayMPI(int) [17]
[68]     0.0    0.00    0.00    4096         std::list<unsigned int, std::allocator<unsigned int> >::operator=(std::list<unsigned int, std::allocator<unsigned int> > const&) [68]
-----------------------------------------------
                0.00    0.00    4096/4096        domain::generateActivePartitions() [13]
[69]     0.0    0.00    0.00    4096         std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&) [69]
-----------------------------------------------
                0.00    0.00      24/24          domain::processDelaunayMPI(int) [17]
[70]     0.0    0.00    0.00      24         GetWallClockTime() [70]
-----------------------------------------------
                0.00    0.00      24/24          domain::processDelaunayMPI(int) [17]
[71]     0.0    0.00    0.00      24         domain::addFile(std::string, std::string, std::string) [71]
-----------------------------------------------
                0.00    0.00      12/12          domain::processDelaunayMPI(int) [17]
[72]     0.0    0.00    0.00      12         domain::runDelaunayMPI(int) [72]
                0.00    0.00      12/12          std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [75]
-----------------------------------------------
                0.00    0.00      12/12          domain::processDelaunayMPI(int) [17]
[73]     0.0    0.00    0.00      12         domain::collectStoreTriangleIds() [73]
-----------------------------------------------
                0.00    0.00      12/12          domain::processDelaunayMPI(int) [17]
[74]     0.0    0.00    0.00      12         domain::storeActiveParitionInfo(int, int*, int*, int*) [74]
-----------------------------------------------
                0.00    0.00      12/12          domain::runDelaunayMPI(int) [72]
[75]     0.0    0.00    0.00      12         std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [75]
-----------------------------------------------
                                 233             std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [76]
                0.00    0.00       1/7           domain::~domain() [123]
                0.00    0.00       6/7           domain::updateTriangleArr() [35]
[76]     0.0    0.00    0.00       7+233     std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [76]
                                 233             std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [76]
-----------------------------------------------
                0.00    0.00       6/6           domain::domain(double, double, double, double, std::string) [38]
[77]     0.0    0.00    0.00       6         point::point(double, double, unsigned long long) [77]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[78]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z13createNewNodeP4edge [78]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[79]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN11boundingBoxC2E5pointS0_ [79]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[80]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN4edgeC2ERK5pointS2_ [80]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[81]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN5pointC2Eddy [81]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[82]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6domainC2EddddSs [82]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[83]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN9gridBoundC2E11gridElementS0_ [83]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[84]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN9partitionC2Ev [84]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[85]     0.0    0.00    0.00       1         _GLOBAL__sub_I_main [85]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [144]
[86]     0.0    0.00    0.00       1         _GLOBAL__sub_I_max [86]
-----------------------------------------------
                0.00    0.00       1/1           domain::triangleTransform() [16]
[87]     0.0    0.00    0.00       1         size(triangleNode*) [87]
-----------------------------------------------
                0.00    0.00       1/1           domain::domain(double, double, double, double, std::string) [38]
[88]     0.0    0.00    0.00       1         boundingBox::setLowPoint(point) [88]
-----------------------------------------------
                0.00    0.00       1/1           domain::domain(double, double, double, double, std::string) [38]
[89]     0.0    0.00    0.00       1         boundingBox::setHighPoint(point) [89]
-----------------------------------------------
                0.00    0.00       1/1           domain::domain(double, double, double, double, std::string) [38]
[90]     0.0    0.00    0.00       1         domain::readPointPartFileInfo() [90]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [78] _GLOBAL__sub_I__Z13createNewNodeP4edge [57] gridElement::gridElement(int, int) [11] domain::updateConflictPartitions()
  [79] _GLOBAL__sub_I__ZN11boundingBoxC2E5pointS0_ [23] edge::edge(point const&, point const&) [20] domain::generateConflictPartitions()
  [80] _GLOBAL__sub_I__ZN4edgeC2ERK5pointS2_ [25] edge::edge(edge const&) [15] domain::mapLow(boundingBox, double, double)
  [81] _GLOBAL__sub_I__ZN5pointC2Eddy [7] edge::operator==(edge const&) [71] domain::addFile(std::string, std::string, std::string)
  [82] _GLOBAL__sub_I__ZN6domainC2EddddSs [10] point::set(point) [34] domain::mapHigh(boundingBox, double, double)
  [83] _GLOBAL__sub_I__ZN9gridBoundC2E11gridElementS0_ [6] point::getX() [26] triangle::computeCenterRadius()
  [84] _GLOBAL__sub_I__ZN9partitionC2Ev [5] point::getY()  [3] triangle::circumCircleContains(point)
  [85] _GLOBAL__sub_I_main    [49] point::setX(double)    [54] triangle::isBad()
  [86] _GLOBAL__sub_I_max     [50] point::setY(double)    [33] triangle::colinear()
  [60] removeNode(triangleNode*&, triangleNode*&, triangleNode*&) [61] point::getId() [28] triangle::getEdge1()
  [51] removeNode(edgeNode*&, edgeNode*&, edgeNode*&) [65] point::setId(unsigned long long) [29] triangle::getEdge2()
  [52] insertFront(triangleNode*&, triangleNode*) [4] point::point(point const&) [30] triangle::getEdge3()
  [46] insertFront(edgeNode*&, edgeNode*) [18] point::point() [21] triangle::intersect(boundingBox)
  [47] createNewNode(edge*)   [22] point::point(double, double) [9] triangle::triangle(triangle const&)
  [53] createNewNode(triangle*) [77] point::point(double, double, unsigned long long) [24] triangle::triangle(point const&, point const&, point const&)
  [63] removeLinkList(edgeNode*&) [12] point::operator==(point) [75] std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  [70] GetWallClockTime()     [14] domain::boundingGrid(boundingBox) [58] gridBound::getLowGridElement()
  [87] size(triangleNode*)    [72] domain::runDelaunayMPI(int) [59] gridBound::getHighGridElement()
  [31] boundingBox::getLowPoint() [2] domain::basicTriangulate(point) [62] gridBound::gridBound(gridElement, gridElement)
  [88] boundingBox::setLowPoint(point) [19] domain::deliverTriangles() [66] partition::partition()
  [32] boundingBox::getHighPoint() [16] domain::triangleTransform() [67] partition::~partition()
  [89] boundingBox::setHighPoint(point) [17] domain::processDelaunayMPI(int) [64] std::list<unsigned int, std::allocator<unsigned int> >::sort()
  [37] boundingBox::boundingBox(point, point) [36] domain::storeActiveParitions(int*, int, unsigned int) [68] std::list<unsigned int, std::allocator<unsigned int> >::operator=(std::list<unsigned int, std::allocator<unsigned int> > const&)
  [27] boundingBox::boundingBox(double, double, double, double) [90] domain::readPointPartFileInfo() [69] std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)
  [55] gridElement::getX()    [73] domain::collectStoreTriangleIds() [76] std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
  [56] gridElement::getY()    [74] domain::storeActiveParitionInfo(int, int*, int*, int*)
  [48] gridElement::gridElement(gridElement const&) [13] domain::generateActivePartitions()
