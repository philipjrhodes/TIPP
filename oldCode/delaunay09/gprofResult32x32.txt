Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 18.45      0.64     0.64                             domain::updateTriangleArr()
 12.83      1.09     0.45 394585849     0.00     0.00  point::point(point const&)
  7.21      1.34     0.25                             domain::deliverTriangles()
  6.05      1.55     0.21                             domain::generateConflictPartitions()
  5.48      1.74     0.19                             domain::generateIntersection()
  5.19      1.92     0.18 18082162     0.00     0.00  triangle::computeCenterRadius()
  4.90      2.09     0.17 100699004     0.00     0.00  boundingBox::getHighPoint()
  4.61      2.25     0.16 202505972     0.00     0.00  point::getX()
  4.32      2.40     0.15  9585376     0.00     0.00  domain::mapLow(boundingBox, double, double)
  3.75      2.53     0.13 119528956     0.00     0.00  boundingBox::getLowPoint()
  3.46      2.65     0.12 200539429     0.00     0.00  point::getY()
  2.88      2.75     0.10  9585376     0.00     0.00  domain::mapHigh(boundingBox, double, double)
  2.59      2.84     0.09        6    15.00    17.41  domain::storeActiveParitions(int*, int, unsigned int)
  2.31      2.92     0.08  9585376     0.00     0.00  domain::boundingGrid(boundingBox)
  2.02      2.99     0.07 12828232     0.00     0.00  edge::operator==(edge const&)
  2.02      3.06     0.07  9585376     0.00     0.00  triangle::triangle(triangle const&)
  1.15      3.10     0.04 24220296     0.00     0.00  point::set(point)
  1.15      3.14     0.04 19170752     0.00     0.00  gridBound::getHighGridElement()
  1.15      3.18     0.04  5022187     0.00     0.00  triangle::intersect(boundingBox)
  0.86      3.21     0.03 19170752     0.00     0.00  gridElement::getX()
  0.86      3.24     0.03     1024     0.03     0.03  std::list<unsigned int, std::allocator<unsigned int> >::operator=(std::list<unsigned int, std::allocator<unsigned int> > const&)
  0.72      3.26     0.03 19170752     0.00     0.00  gridElement::gridElement(int, int)
  0.58      3.28     0.02 76683008     0.00     0.00  gridElement::gridElement(gridElement const&)
  0.58      3.30     0.02 69745728     0.00     0.00  point::point()
  0.58      3.32     0.02 19170752     0.00     0.00  gridBound::getLowGridElement()
  0.58      3.34     0.02  9585376     0.00     0.00  boundingBox::boundingBox(point, point)
  0.58      3.36     0.02  9585376     0.00     0.00  gridBound::gridBound(gridElement, gridElement)
  0.43      3.38     0.02 24374274     0.00     0.00  point::getId()
  0.43      3.39     0.02 24220302     0.00     0.00  point::point(double, double, unsigned long long)
  0.29      3.40     0.01 28992938     0.00     0.00  point::operator==(point)
  0.29      3.41     0.01 26977076     0.00     0.00  point::point(double, double)
  0.29      3.42     0.01 19170752     0.00     0.00  gridElement::getY()
  0.29      3.43     0.01  6469983     0.00     0.00  triangle::circumCircleContains(point)
  0.29      3.44     0.01  5022187     0.00     0.00  boundingBox::boundingBox(double, double, double, double)
  0.29      3.45     0.01                             domain::triangleTransform()
  0.29      3.46     0.01                             domain::updateConflictPartitions()
  0.14      3.47     0.01    26620     0.00     0.00  point::setId(unsigned long long)
  0.14      3.47     0.01                             triangle::inside(boundingBox)
  0.00      3.47     0.00 10070996     0.00     0.00  point::setX(double)
  0.00      3.47     0.00 10070996     0.00     0.00  point::setY(double)
  0.00      3.47     0.00  6521032     0.00     0.00  triangle::getFarestCoorX()
  0.00      3.47     0.00   749692     0.00     0.00  insertFront(edgeNode*&, edgeNode*)
  0.00      3.47     0.00   749692     0.00     0.00  createNewNode(edge*)
  0.00      3.47     0.00   480684     0.00     0.00  edge::edge(point const&, point const&)
  0.00      3.47     0.00   269008     0.00     0.00  removeNode(edgeNode*&, edgeNode*&, edgeNode*&)
  0.00      3.47     0.00   269008     0.00     0.00  edge::edge(edge const&)
  0.00      3.47     0.00   262603     0.00     0.00  insertFront(triangleNode*&, triangleNode*)
  0.00      3.47     0.00   211678     0.00     0.00  triangle::triangle(point const&, point const&, point const&)
  0.00      3.47     0.00   211676     0.00     0.00  triangle::colinear()
  0.00      3.47     0.00   211552     0.00     0.00  createNewNode(triangle*)
  0.00      3.47     0.00   211552     0.00     0.00  triangle::isBad()
  0.00      3.47     0.00   160228     0.00     0.00  removeNode(triangleNode*&, triangleNode*&, triangleNode*&)
  0.00      3.47     0.00   160228     0.00     0.00  triangle::getEdge1()
  0.00      3.47     0.00   160228     0.00     0.00  triangle::getEdge2()
  0.00      3.47     0.00   160228     0.00     0.00  triangle::getEdge3()
  0.00      3.47     0.00    53240     0.00     0.00  removeLinkList(edgeNode*&)
  0.00      3.47     0.00    51049     0.00     0.00  extractNode(triangleNode*&, triangleNode*, triangleNode*&)
  0.00      3.47     0.00    26620     0.00     0.01  domain::basicTriangulate(point)
  0.00      3.47     0.00     6144     0.00     0.00  std::list<unsigned int, std::allocator<unsigned int> >::sort()
  0.00      3.47     0.00     1024     0.00     0.00  partition::partition()
  0.00      3.47     0.00     1024     0.00     0.00  partition::~partition()
  0.00      3.47     0.00     1024     0.00     0.00  std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)
  0.00      3.47     0.00       12     0.00     0.00  GetWallClockTime()
  0.00      3.47     0.00       12     0.00     0.00  domain::addFile(std::string, std::string, std::string)
  0.00      3.47     0.00        7     0.00     0.00  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
  0.00      3.47     0.00        6     0.00     0.00  domain::runDelaunayMPI(int)
  0.00      3.47     0.00        6     0.00     0.00  domain::collectStoreTriangleIds()
  0.00      3.47     0.00        6     0.00     0.00  domain::storeActiveParitionInfo(int, int*, int*, int*)
  0.00      3.47     0.00        6     0.00     0.00  std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z13createNewNodeP4edge
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN11boundingBoxC2E5pointS0_
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN4edgeC2ERK5pointS2_
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN5pointC2Eddy
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6domainC2EddddSs
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN9gridBoundC2E11gridElementS0_
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN9partitionC2Ev
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I_main
  0.00      3.47     0.00        1     0.00     0.00  _GLOBAL__sub_I_max
  0.00      3.47     0.00        1     0.00     0.00  addLinkList(triangleNode*&, triangleNode*&)
  0.00      3.47     0.00        1     0.00     0.00  size(triangleNode*)
  0.00      3.47     0.00        1     0.00     0.00  boundingBox::setLowPoint(point)
  0.00      3.47     0.00        1     0.00     0.00  boundingBox::setHighPoint(point)
  0.00      3.47     0.00        1     0.00     0.00  domain::readPointPartFileInfo()

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.29% of 3.47 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     53.1    0.19    1.65                 domain::generateIntersection() [1]
                0.08    1.02 9585376/9585376     domain::boundingGrid(boundingBox) [2]
                0.04    0.10 5022187/5022187     triangle::intersect(boundingBox) [15]
                0.10    0.04 9585376/18082162     triangle::computeCenterRadius() [10]
                0.07    0.01 9585376/9585376     triangle::triangle(triangle const&) [20]
                0.04    0.01 19170752/19170752     gridBound::getHighGridElement() [21]
                0.04    0.00 38800502/394585849     point::point(point const&) [5]
                0.02    0.01 9585376/9585376     boundingBox::boundingBox(point, point) [23]
                0.03    0.00 19170752/19170752     gridElement::getX() [24]
                0.02    0.01 19170752/19170752     gridBound::getLowGridElement() [27]
                0.01    0.00 5022187/5022187     boundingBox::boundingBox(double, double, double, double) [34]
                0.01    0.00 19170752/19170752     gridElement::getY() [38]
                0.01    0.00 19170752/26977076     point::point(double, double) [37]
                0.00    0.00      24/119528956     boundingBox::getLowPoint() [8]
                0.00    0.00      12/100699004     boundingBox::getHighPoint() [6]
                0.00    0.00      18/202505972     point::getX() [12]
                0.00    0.00      18/200539429     point::getY() [17]
                0.00    0.00 5022187/10070996     point::setY(double) [60]
-----------------------------------------------
                0.08    1.02 9585376/9585376     domain::generateIntersection() [1]
[2]     31.6    0.08    1.02 9585376         domain::boundingGrid(boundingBox) [2]
                0.15    0.39 9585376/9585376     domain::mapLow(boundingBox, double, double) [4]
                0.10    0.18 9585376/9585376     domain::mapHigh(boundingBox, double, double) [7]
                0.03    0.02 19170752/100699004     boundingBox::getHighPoint() [6]
                0.04    0.00 38341504/394585849     point::point(point const&) [5]
                0.02    0.02 19170752/119528956     boundingBox::getLowPoint() [8]
                0.02    0.00 9585376/9585376     gridBound::gridBound(gridElement, gridElement) [28]
                0.02    0.00 19170752/202505972     point::getX() [12]
                0.01    0.00 19170752/200539429     point::getY() [17]
                0.01    0.00 28756128/76683008     gridElement::gridElement(gridElement const&) [29]
-----------------------------------------------
                                                 <spontaneous>
[3]     24.3    0.64    0.20                 domain::updateTriangleArr() [3]
                0.08    0.03 8073432/18082162     triangle::computeCenterRadius() [10]
                0.04    0.00 24220296/24220296     point::set(point) [22]
                0.03    0.00 24220296/394585849     point::point(point const&) [5]
                0.02    0.00 24220296/24220302     point::point(double, double, unsigned long long) [33]
                0.01    0.00 28630206/69745728     point::point() [30]
                0.00    0.00       6/7           std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [77]
-----------------------------------------------
                0.15    0.39 9585376/9585376     domain::boundingGrid(boundingBox) [2]
[4]     15.6    0.15    0.39 9585376         domain::mapLow(boundingBox, double, double) [4]
                0.13    0.09 76506053/100699004     boundingBox::getHighPoint() [6]
                0.04    0.04 38164549/119528956     boundingBox::getLowPoint() [8]
                0.05    0.00 57381018/202505972     point::getX() [12]
                0.03    0.00 57289584/200539429     point::getY() [17]
                0.01    0.00 9585376/19170752     gridElement::gridElement(int, int) [26]
-----------------------------------------------
                0.00    0.00   52220/394585849     domain::initTriangulateAdvance() [13]
                0.01    0.00 6469983/394585849     domain::basicTriangulate(point) [14]
                0.01    0.00 9585376/394585849     boundingBox::boundingBox(point, point) [23]
                0.03    0.00 24220296/394585849     domain::updateTriangleArr() [3]
                0.03    0.00 27895070/394585849     triangle::intersect(boundingBox) [15]
                0.03    0.00 28992938/394585849     edge::operator==(edge const&) [18]
                0.04    0.00 38341504/394585849     domain::boundingGrid(boundingBox) [2]
                0.04    0.00 38800502/394585849     domain::generateIntersection() [1]
                0.11    0.00 100699004/394585849     boundingBox::getHighPoint() [6]
                0.13    0.00 119528956/394585849     boundingBox::getLowPoint() [8]
[5]     12.8    0.45    0.00 394585849         point::point(point const&) [5]
-----------------------------------------------
                0.00    0.00      12/100699004     domain::generateIntersection() [1]
                0.01    0.01 5022187/100699004     triangle::intersect(boundingBox) [15]
                0.03    0.02 19170752/100699004     domain::boundingGrid(boundingBox) [2]
                0.13    0.09 76506053/100699004     domain::mapLow(boundingBox, double, double) [4]
[6]      8.2    0.17    0.11 100699004         boundingBox::getHighPoint() [6]
                0.11    0.00 100699004/394585849     point::point(point const&) [5]
-----------------------------------------------
                0.10    0.18 9585376/9585376     domain::boundingGrid(boundingBox) [2]
[7]      8.0    0.10    0.18 9585376         domain::mapHigh(boundingBox, double, double) [7]
                0.06    0.06 57171444/119528956     boundingBox::getLowPoint() [8]
                0.02    0.00 28640966/202505972     point::getX() [12]
                0.02    0.00 28530478/200539429     point::getY() [17]
                0.01    0.00 9585376/19170752     gridElement::gridElement(int, int) [26]
-----------------------------------------------
                0.00    0.00      24/119528956     domain::generateIntersection() [1]
                0.01    0.01 5022187/119528956     triangle::intersect(boundingBox) [15]
                0.02    0.02 19170752/119528956     domain::boundingGrid(boundingBox) [2]
                0.04    0.04 38164549/119528956     domain::mapLow(boundingBox, double, double) [4]
                0.06    0.06 57171444/119528956     domain::mapHigh(boundingBox, double, double) [7]
[8]      7.6    0.13    0.13 119528956         boundingBox::getLowPoint() [8]
                0.13    0.00 119528956/394585849     point::point(point const&) [5]
-----------------------------------------------
                                                 <spontaneous>
[9]      7.5    0.25    0.01                 domain::deliverTriangles() [9]
                0.01    0.00 17153910/24374274     point::getId() [32]
-----------------------------------------------
                0.00    0.00       2/18082162     domain::domain(double, double, double, double, std::string) [51]
                0.00    0.00  423352/18082162     domain::basicTriangulate(point) [14]
                0.08    0.03 8073432/18082162     domain::updateTriangleArr() [3]
                0.10    0.04 9585376/18082162     domain::generateIntersection() [1]
[10]     7.4    0.18    0.08 18082162         triangle::computeCenterRadius() [10]
                0.04    0.00 54246486/202505972     point::getX() [12]
                0.03    0.00 54246486/200539429     point::getY() [17]
-----------------------------------------------
                                                 <spontaneous>
[11]     6.1    0.21    0.00                 domain::generateConflictPartitions() [11]
                0.00    0.00    6144/6144        std::list<unsigned int, std::allocator<unsigned int> >::sort() [71]
-----------------------------------------------
                0.00    0.00      18/202505972     domain::generateIntersection() [1]
                0.00    0.00   25600/202505972     domain::initTriangulateAdvance() [13]
                0.00    0.00   26620/202505972     domain::basicTriangulate(point) [14]
                0.00    0.00  617264/202505972     coorX_comparison(void const*, void const*) [43]
                0.00    0.00  635028/202505972     triangle::colinear() [42]
                0.01    0.00 6469983/202505972     triangle::circumCircleContains(point) [31]
                0.01    0.00 7192308/202505972     domain::storeActiveParitions(int*, int, unsigned int) [19]
                0.02    0.00 19170752/202505972     domain::boundingGrid(boundingBox) [2]
                0.02    0.00 28099929/202505972     triangle::intersect(boundingBox) [15]
                0.02    0.00 28640966/202505972     domain::mapHigh(boundingBox, double, double) [7]
                0.04    0.00 54246486/202505972     triangle::computeCenterRadius() [10]
                0.05    0.00 57381018/202505972     domain::mapLow(boundingBox, double, double) [4]
[12]     4.6    0.16    0.00 202505972         point::getX() [12]
-----------------------------------------------
                                                 <spontaneous>
[13]     4.4    0.00    0.15                 domain::initTriangulateAdvance() [13]
                0.00    0.15   26620/26620       domain::basicTriangulate(point) [14]
                0.01    0.00   26620/26620       point::setId(unsigned long long) [40]
                0.00    0.00   52220/394585849     point::point(point const&) [5]
                0.00    0.00   25600/202505972     point::getX() [12]
                0.00    0.00   25600/200539429     point::getY() [17]
                0.00    0.00   26620/69745728     point::point() [30]
                0.00    0.00   26620/10070996     point::setX(double) [59]
                0.00    0.00   26620/10070996     point::setY(double) [60]
-----------------------------------------------
                0.00    0.15   26620/26620       domain::initTriangulateAdvance() [13]
[14]     4.2    0.00    0.15   26620         domain::basicTriangulate(point) [14]
                0.07    0.04 12828232/12828232     edge::operator==(edge const&) [18]
                0.01    0.01 6469983/6469983     triangle::circumCircleContains(point) [31]
                0.01    0.00 6469983/394585849     point::point(point const&) [5]
                0.00    0.00  423352/18082162     triangle::computeCenterRadius() [10]
                0.00    0.00  211676/211676      triangle::colinear() [42]
                0.00    0.00  211676/211678      triangle::triangle(point const&, point const&, point const&) [45]
                0.00    0.00  269008/269008      edge::edge(edge const&) [46]
                0.00    0.00  160228/160228      triangle::getEdge1() [47]
                0.00    0.00  160228/160228      triangle::getEdge2() [48]
                0.00    0.00  160228/160228      triangle::getEdge3() [49]
                0.00    0.00   26620/202505972     point::getX() [12]
                0.00    0.00 6521032/6521032     triangle::getFarestCoorX() [61]
                0.00    0.00  749692/749692      createNewNode(edge*) [63]
                0.00    0.00  749692/749692      insertFront(edgeNode*&, edgeNode*) [62]
                0.00    0.00  269008/269008      removeNode(edgeNode*&, edgeNode*&, edgeNode*&) [64]
                0.00    0.00  262601/262603      insertFront(triangleNode*&, triangleNode*) [65]
                0.00    0.00  211552/211552      triangle::isBad() [67]
                0.00    0.00  211552/211552      createNewNode(triangle*) [66]
                0.00    0.00  160228/160228      removeNode(triangleNode*&, triangleNode*&, triangleNode*&) [68]
                0.00    0.00   53240/53240       removeLinkList(edgeNode*&) [69]
                0.00    0.00   51049/51049       extractNode(triangleNode*&, triangleNode*, triangleNode*&) [70]
-----------------------------------------------
                0.04    0.10 5022187/5022187     domain::generateIntersection() [1]
[15]     4.0    0.04    0.10 5022187         triangle::intersect(boundingBox) [15]
                0.03    0.00 27895070/394585849     point::point(point const&) [5]
                0.02    0.00 28099929/202505972     point::getX() [12]
                0.02    0.00 26979192/200539429     point::getY() [17]
                0.01    0.01 5022187/100699004     boundingBox::getHighPoint() [6]
                0.01    0.01 5022187/119528956     boundingBox::getLowPoint() [8]
                0.00    0.00 7806322/26977076     point::point(double, double) [37]
-----------------------------------------------
                                                 <spontaneous>
[16]     3.9    0.00    0.13                 domain::processDelaunayMPI(int) [16]
                0.09    0.01       6/6           domain::storeActiveParitions(int*, int, unsigned int) [19]
                0.03    0.00    1024/1024        std::list<unsigned int, std::allocator<unsigned int> >::operator=(std::list<unsigned int, std::allocator<unsigned int> > const&) [25]
                0.00    0.00      12/12          GetWallClockTime() [75]
                0.00    0.00      12/12          domain::addFile(std::string, std::string, std::string) [76]
                0.00    0.00       6/6           domain::storeActiveParitionInfo(int, int*, int*, int*) [80]
                0.00    0.00       6/6           domain::runDelaunayMPI(int) [78]
                0.00    0.00       6/6           domain::collectStoreTriangleIds() [79]
-----------------------------------------------
                0.00    0.00      18/200539429     domain::generateIntersection() [1]
                0.00    0.00   25600/200539429     domain::initTriangulateAdvance() [13]
                0.00    0.00  635028/200539429     triangle::colinear() [42]
                0.00    0.00 6469983/200539429     triangle::circumCircleContains(point) [31]
                0.00    0.00 7192308/200539429     domain::storeActiveParitions(int*, int, unsigned int) [19]
                0.01    0.00 19170752/200539429     domain::boundingGrid(boundingBox) [2]
                0.02    0.00 26979192/200539429     triangle::intersect(boundingBox) [15]
                0.02    0.00 28530478/200539429     domain::mapHigh(boundingBox, double, double) [7]
                0.03    0.00 54246486/200539429     triangle::computeCenterRadius() [10]
                0.03    0.00 57289584/200539429     domain::mapLow(boundingBox, double, double) [4]
[17]     3.5    0.12    0.00 200539429         point::getY() [17]
-----------------------------------------------
                0.07    0.04 12828232/12828232     domain::basicTriangulate(point) [14]
[18]     3.2    0.07    0.04 12828232         edge::operator==(edge const&) [18]
                0.03    0.00 28992938/394585849     point::point(point const&) [5]
                0.01    0.00 28992938/28992938     point::operator==(point) [36]
-----------------------------------------------
                0.09    0.01       6/6           domain::processDelaunayMPI(int) [16]
[19]     3.0    0.09    0.01       6         domain::storeActiveParitions(int*, int, unsigned int) [19]
                0.01    0.00 7192308/202505972     point::getX() [12]
                0.00    0.00 7192308/24374274     point::getId() [32]
                0.00    0.00 7192308/200539429     point::getY() [17]
-----------------------------------------------
                0.07    0.01 9585376/9585376     domain::generateIntersection() [1]
[20]     2.3    0.07    0.01 9585376         triangle::triangle(triangle const&) [20]
                0.01    0.00 28756128/69745728     point::point() [30]
-----------------------------------------------
                0.04    0.01 19170752/19170752     domain::generateIntersection() [1]
[21]     1.3    0.04    0.01 19170752         gridBound::getHighGridElement() [21]
                0.01    0.00 19170752/76683008     gridElement::gridElement(gridElement const&) [29]
-----------------------------------------------
                0.04    0.00 24220296/24220296     domain::updateTriangleArr() [3]
[22]     1.2    0.04    0.00 24220296         point::set(point) [22]
-----------------------------------------------
                0.02    0.01 9585376/9585376     domain::generateIntersection() [1]
[23]     0.9    0.02    0.01 9585376         boundingBox::boundingBox(point, point) [23]
                0.01    0.00 9585376/394585849     point::point(point const&) [5]
-----------------------------------------------
                0.03    0.00 19170752/19170752     domain::generateIntersection() [1]
[24]     0.9    0.03    0.00 19170752         gridElement::getX() [24]
-----------------------------------------------
                0.03    0.00    1024/1024        domain::processDelaunayMPI(int) [16]
[25]     0.9    0.03    0.00    1024         std::list<unsigned int, std::allocator<unsigned int> >::operator=(std::list<unsigned int, std::allocator<unsigned int> > const&) [25]
-----------------------------------------------
                0.01    0.00 9585376/19170752     domain::mapHigh(boundingBox, double, double) [7]
                0.01    0.00 9585376/19170752     domain::mapLow(boundingBox, double, double) [4]
[26]     0.7    0.03    0.00 19170752         gridElement::gridElement(int, int) [26]
-----------------------------------------------
                0.02    0.01 19170752/19170752     domain::generateIntersection() [1]
[27]     0.7    0.02    0.01 19170752         gridBound::getLowGridElement() [27]
                0.01    0.00 19170752/76683008     gridElement::gridElement(gridElement const&) [29]
-----------------------------------------------
                0.02    0.00 9585376/9585376     domain::boundingGrid(boundingBox) [2]
[28]     0.6    0.02    0.00 9585376         gridBound::gridBound(gridElement, gridElement) [28]
                0.00    0.00 9585376/76683008     gridElement::gridElement(gridElement const&) [29]
-----------------------------------------------
                0.00    0.00 9585376/76683008     gridBound::gridBound(gridElement, gridElement) [28]
                0.01    0.00 19170752/76683008     gridBound::getLowGridElement() [27]
                0.01    0.00 19170752/76683008     gridBound::getHighGridElement() [21]
                0.01    0.00 28756128/76683008     domain::boundingGrid(boundingBox) [2]
[29]     0.6    0.02    0.00 76683008         gridElement::gridElement(gridElement const&) [29]
-----------------------------------------------
                0.00    0.00       4/69745728     domain::domain(double, double, double, double, std::string) [51]
                0.00    0.00   26620/69745728     domain::initTriangulateAdvance() [13]
                0.00    0.00  153978/69745728     domain::triangleTransform() [35]
                0.00    0.00  538016/69745728     edge::edge(edge const&) [46]
                0.00    0.00  635034/69745728     triangle::triangle(point const&, point const&, point const&) [45]
                0.00    0.00  961368/69745728     edge::edge(point const&, point const&) [44]
                0.00    0.00 10044374/69745728     boundingBox::boundingBox(double, double, double, double) [34]
                0.01    0.00 28630206/69745728     domain::updateTriangleArr() [3]
                0.01    0.00 28756128/69745728     triangle::triangle(triangle const&) [20]
[30]     0.6    0.02    0.00 69745728         point::point() [30]
-----------------------------------------------
                0.01    0.01 6469983/6469983     domain::basicTriangulate(point) [14]
[31]     0.5    0.01    0.01 6469983         triangle::circumCircleContains(point) [31]
                0.01    0.00 6469983/202505972     point::getX() [12]
                0.00    0.00 6469983/200539429     point::getY() [17]
-----------------------------------------------
                0.00    0.00   28056/24374274     domain::storeAllTriangles() [50]
                0.00    0.00 7192308/24374274     domain::storeActiveParitions(int*, int, unsigned int) [19]
                0.01    0.00 17153910/24374274     domain::deliverTriangles() [9]
[32]     0.4    0.02    0.00 24374274         point::getId() [32]
-----------------------------------------------
                0.00    0.00       6/24220302     domain::domain(double, double, double, double, std::string) [51]
                0.02    0.00 24220296/24220302     domain::updateTriangleArr() [3]
[33]     0.4    0.02    0.00 24220302         point::point(double, double, unsigned long long) [33]
-----------------------------------------------
                0.01    0.00 5022187/5022187     domain::generateIntersection() [1]
[34]     0.4    0.01    0.00 5022187         boundingBox::boundingBox(double, double, double, double) [34]
                0.00    0.00 10044374/69745728     point::point() [30]
                0.00    0.00 10044374/10070996     point::setX(double) [59]
                0.00    0.00 5022187/10070996     point::setY(double) [60]
-----------------------------------------------
                                                 <spontaneous>
[35]     0.3    0.01    0.00                 domain::triangleTransform() [35]
                0.00    0.00  153978/69745728     point::point() [30]
                0.00    0.00       1/1           size(triangleNode*) [92]
                0.00    0.00       1/1           addLinkList(triangleNode*&, triangleNode*&) [91]
-----------------------------------------------
                0.01    0.00 28992938/28992938     edge::operator==(edge const&) [18]
[36]     0.3    0.01    0.00 28992938         point::operator==(point) [36]
-----------------------------------------------
                0.00    0.00       2/26977076     domain::domain(double, double, double, double, std::string) [51]
                0.00    0.00 7806322/26977076     triangle::intersect(boundingBox) [15]
                0.01    0.00 19170752/26977076     domain::generateIntersection() [1]
[37]     0.3    0.01    0.00 26977076         point::point(double, double) [37]
-----------------------------------------------
                0.01    0.00 19170752/19170752     domain::generateIntersection() [1]
[38]     0.3    0.01    0.00 19170752         gridElement::getY() [38]
-----------------------------------------------
                                                 <spontaneous>
[39]     0.3    0.01    0.00                 domain::updateConflictPartitions() [39]
-----------------------------------------------
                0.01    0.00   26620/26620       domain::initTriangulateAdvance() [13]
[40]     0.1    0.01    0.00   26620         point::setId(unsigned long long) [40]
-----------------------------------------------
                                                 <spontaneous>
[41]     0.1    0.01    0.00                 triangle::inside(boundingBox) [41]
-----------------------------------------------
                0.00    0.00  211676/211676      domain::basicTriangulate(point) [14]
[42]     0.0    0.00    0.00  211676         triangle::colinear() [42]
                0.00    0.00  635028/202505972     point::getX() [12]
                0.00    0.00  635028/200539429     point::getY() [17]
-----------------------------------------------
                                                 <spontaneous>
[43]     0.0    0.00    0.00                 coorX_comparison(void const*, void const*) [43]
                0.00    0.00  617264/202505972     point::getX() [12]
-----------------------------------------------
                0.00    0.00  160228/480684      triangle::getEdge1() [47]
                0.00    0.00  160228/480684      triangle::getEdge2() [48]
                0.00    0.00  160228/480684      triangle::getEdge3() [49]
[44]     0.0    0.00    0.00  480684         edge::edge(point const&, point const&) [44]
                0.00    0.00  961368/69745728     point::point() [30]
-----------------------------------------------
                0.00    0.00       2/211678      domain::domain(double, double, double, double, std::string) [51]
                0.00    0.00  211676/211678      domain::basicTriangulate(point) [14]
[45]     0.0    0.00    0.00  211678         triangle::triangle(point const&, point const&, point const&) [45]
                0.00    0.00  635034/69745728     point::point() [30]
-----------------------------------------------
                0.00    0.00  269008/269008      domain::basicTriangulate(point) [14]
[46]     0.0    0.00    0.00  269008         edge::edge(edge const&) [46]
                0.00    0.00  538016/69745728     point::point() [30]
-----------------------------------------------
                0.00    0.00  160228/160228      domain::basicTriangulate(point) [14]
[47]     0.0    0.00    0.00  160228         triangle::getEdge1() [47]
                0.00    0.00  160228/480684      edge::edge(point const&, point const&) [44]
-----------------------------------------------
                0.00    0.00  160228/160228      domain::basicTriangulate(point) [14]
[48]     0.0    0.00    0.00  160228         triangle::getEdge2() [48]
                0.00    0.00  160228/480684      edge::edge(point const&, point const&) [44]
-----------------------------------------------
                0.00    0.00  160228/160228      domain::basicTriangulate(point) [14]
[49]     0.0    0.00    0.00  160228         triangle::getEdge3() [49]
                0.00    0.00  160228/480684      edge::edge(point const&, point const&) [44]
-----------------------------------------------
                                                 <spontaneous>
[50]     0.0    0.00    0.00                 domain::storeAllTriangles() [50]
                0.00    0.00   28056/24374274     point::getId() [32]
-----------------------------------------------
                                                 <spontaneous>
[51]     0.0    0.00    0.00                 domain::domain(double, double, double, double, std::string) [51]
                0.00    0.00       2/18082162     triangle::computeCenterRadius() [10]
                0.00    0.00       6/24220302     point::point(double, double, unsigned long long) [33]
                0.00    0.00       2/211678      triangle::triangle(point const&, point const&, point const&) [45]
                0.00    0.00       4/69745728     point::point() [30]
                0.00    0.00       2/26977076     point::point(double, double) [37]
                0.00    0.00    1024/1024        partition::partition() [72]
                0.00    0.00       2/10070996     point::setX(double) [59]
                0.00    0.00       2/10070996     point::setY(double) [60]
                0.00    0.00       2/262603      insertFront(triangleNode*&, triangleNode*) [65]
                0.00    0.00       1/1           boundingBox::setLowPoint(point) [93]
                0.00    0.00       1/1           boundingBox::setHighPoint(point) [94]
                0.00    0.00       1/1           domain::readPointPartFileInfo() [95]
-----------------------------------------------
                0.00    0.00       2/10070996     domain::domain(double, double, double, double, std::string) [51]
                0.00    0.00   26620/10070996     domain::initTriangulateAdvance() [13]
                0.00    0.00 10044374/10070996     boundingBox::boundingBox(double, double, double, double) [34]
[59]     0.0    0.00    0.00 10070996         point::setX(double) [59]
-----------------------------------------------
                0.00    0.00       2/10070996     domain::domain(double, double, double, double, std::string) [51]
                0.00    0.00   26620/10070996     domain::initTriangulateAdvance() [13]
                0.00    0.00 5022187/10070996     boundingBox::boundingBox(double, double, double, double) [34]
                0.00    0.00 5022187/10070996     domain::generateIntersection() [1]
[60]     0.0    0.00    0.00 10070996         point::setY(double) [60]
-----------------------------------------------
                0.00    0.00 6521032/6521032     domain::basicTriangulate(point) [14]
[61]     0.0    0.00    0.00 6521032         triangle::getFarestCoorX() [61]
-----------------------------------------------
                0.00    0.00  749692/749692      domain::basicTriangulate(point) [14]
[62]     0.0    0.00    0.00  749692         insertFront(edgeNode*&, edgeNode*) [62]
-----------------------------------------------
                0.00    0.00  749692/749692      domain::basicTriangulate(point) [14]
[63]     0.0    0.00    0.00  749692         createNewNode(edge*) [63]
-----------------------------------------------
                0.00    0.00  269008/269008      domain::basicTriangulate(point) [14]
[64]     0.0    0.00    0.00  269008         removeNode(edgeNode*&, edgeNode*&, edgeNode*&) [64]
-----------------------------------------------
                0.00    0.00       2/262603      domain::domain(double, double, double, double, std::string) [51]
                0.00    0.00  262601/262603      domain::basicTriangulate(point) [14]
[65]     0.0    0.00    0.00  262603         insertFront(triangleNode*&, triangleNode*) [65]
-----------------------------------------------
                0.00    0.00  211552/211552      domain::basicTriangulate(point) [14]
[66]     0.0    0.00    0.00  211552         createNewNode(triangle*) [66]
-----------------------------------------------
                0.00    0.00  211552/211552      domain::basicTriangulate(point) [14]
[67]     0.0    0.00    0.00  211552         triangle::isBad() [67]
-----------------------------------------------
                0.00    0.00  160228/160228      domain::basicTriangulate(point) [14]
[68]     0.0    0.00    0.00  160228         removeNode(triangleNode*&, triangleNode*&, triangleNode*&) [68]
-----------------------------------------------
                0.00    0.00   53240/53240       domain::basicTriangulate(point) [14]
[69]     0.0    0.00    0.00   53240         removeLinkList(edgeNode*&) [69]
-----------------------------------------------
                0.00    0.00   51049/51049       domain::basicTriangulate(point) [14]
[70]     0.0    0.00    0.00   51049         extractNode(triangleNode*&, triangleNode*, triangleNode*&) [70]
-----------------------------------------------
                0.00    0.00    6144/6144        domain::generateConflictPartitions() [11]
[71]     0.0    0.00    0.00    6144         std::list<unsigned int, std::allocator<unsigned int> >::sort() [71]
-----------------------------------------------
                0.00    0.00    1024/1024        domain::domain(double, double, double, double, std::string) [51]
[72]     0.0    0.00    0.00    1024         partition::partition() [72]
-----------------------------------------------
                0.00    0.00    1024/1024        domain::~domain() [127]
[73]     0.0    0.00    0.00    1024         partition::~partition() [73]
-----------------------------------------------
                0.00    0.00    1024/1024        domain::generateActivePartitions() [124]
[74]     0.0    0.00    0.00    1024         std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&) [74]
-----------------------------------------------
                0.00    0.00      12/12          domain::processDelaunayMPI(int) [16]
[75]     0.0    0.00    0.00      12         GetWallClockTime() [75]
-----------------------------------------------
                0.00    0.00      12/12          domain::processDelaunayMPI(int) [16]
[76]     0.0    0.00    0.00      12         domain::addFile(std::string, std::string, std::string) [76]
-----------------------------------------------
                                  26             std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [77]
                0.00    0.00       1/7           domain::~domain() [127]
                0.00    0.00       6/7           domain::updateTriangleArr() [3]
[77]     0.0    0.00    0.00       7+26      std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [77]
                                  26             std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) [77]
-----------------------------------------------
                0.00    0.00       6/6           domain::processDelaunayMPI(int) [16]
[78]     0.0    0.00    0.00       6         domain::runDelaunayMPI(int) [78]
                0.00    0.00       6/6           std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [81]
-----------------------------------------------
                0.00    0.00       6/6           domain::processDelaunayMPI(int) [16]
[79]     0.0    0.00    0.00       6         domain::collectStoreTriangleIds() [79]
-----------------------------------------------
                0.00    0.00       6/6           domain::processDelaunayMPI(int) [16]
[80]     0.0    0.00    0.00       6         domain::storeActiveParitionInfo(int, int*, int*, int*) [80]
-----------------------------------------------
                0.00    0.00       6/6           domain::runDelaunayMPI(int) [78]
[81]     0.0    0.00    0.00       6         std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [81]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[82]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z13createNewNodeP4edge [82]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[83]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN11boundingBoxC2E5pointS0_ [83]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[84]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN4edgeC2ERK5pointS2_ [84]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[85]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN5pointC2Eddy [85]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[86]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6domainC2EddddSs [86]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[87]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN9gridBoundC2E11gridElementS0_ [87]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[88]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN9partitionC2Ev [88]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[89]     0.0    0.00    0.00       1         _GLOBAL__sub_I_main [89]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [146]
[90]     0.0    0.00    0.00       1         _GLOBAL__sub_I_max [90]
-----------------------------------------------
                0.00    0.00       1/1           domain::triangleTransform() [35]
[91]     0.0    0.00    0.00       1         addLinkList(triangleNode*&, triangleNode*&) [91]
-----------------------------------------------
                0.00    0.00       1/1           domain::triangleTransform() [35]
[92]     0.0    0.00    0.00       1         size(triangleNode*) [92]
-----------------------------------------------
                0.00    0.00       1/1           domain::domain(double, double, double, double, std::string) [51]
[93]     0.0    0.00    0.00       1         boundingBox::setLowPoint(point) [93]
-----------------------------------------------
                0.00    0.00       1/1           domain::domain(double, double, double, double, std::string) [51]
[94]     0.0    0.00    0.00       1         boundingBox::setHighPoint(point) [94]
-----------------------------------------------
                0.00    0.00       1/1           domain::domain(double, double, double, double, std::string) [51]
[95]     0.0    0.00    0.00       1         domain::readPointPartFileInfo() [95]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [82] _GLOBAL__sub_I__Z13createNewNodeP4edge [29] gridElement::gridElement(gridElement const&) [39] domain::updateConflictPartitions()
  [83] _GLOBAL__sub_I__ZN11boundingBoxC2E5pointS0_ [26] gridElement::gridElement(int, int) [11] domain::generateConflictPartitions()
  [84] _GLOBAL__sub_I__ZN4edgeC2ERK5pointS2_ [44] edge::edge(point const&, point const&) [4] domain::mapLow(boundingBox, double, double)
  [85] _GLOBAL__sub_I__ZN5pointC2Eddy [46] edge::edge(edge const&) [76] domain::addFile(std::string, std::string, std::string)
  [86] _GLOBAL__sub_I__ZN6domainC2EddddSs [18] edge::operator==(edge const&) [7] domain::mapHigh(boundingBox, double, double)
  [87] _GLOBAL__sub_I__ZN9gridBoundC2E11gridElementS0_ [22] point::set(point) [61] triangle::getFarestCoorX()
  [88] _GLOBAL__sub_I__ZN9partitionC2Ev [12] point::getX() [10] triangle::computeCenterRadius()
  [89] _GLOBAL__sub_I_main    [17] point::getY()          [31] triangle::circumCircleContains(point)
  [90] _GLOBAL__sub_I_max     [59] point::setX(double)    [67] triangle::isBad()
  [68] removeNode(triangleNode*&, triangleNode*&, triangleNode*&) [60] point::setY(double) [41] triangle::inside(boundingBox)
  [64] removeNode(edgeNode*&, edgeNode*&, edgeNode*&) [32] point::getId() [42] triangle::colinear()
  [91] addLinkList(triangleNode*&, triangleNode*&) [40] point::setId(unsigned long long) [47] triangle::getEdge1()
  [70] extractNode(triangleNode*&, triangleNode*, triangleNode*&) [5] point::point(point const&) [48] triangle::getEdge2()
  [65] insertFront(triangleNode*&, triangleNode*) [30] point::point() [49] triangle::getEdge3()
  [62] insertFront(edgeNode*&, edgeNode*) [37] point::point(double, double) [15] triangle::intersect(boundingBox)
  [63] createNewNode(edge*)   [33] point::point(double, double, unsigned long long) [20] triangle::triangle(triangle const&)
  [66] createNewNode(triangle*) [36] point::operator==(point) [45] triangle::triangle(point const&, point const&, point const&)
  [69] removeLinkList(edgeNode*&) [2] domain::boundingGrid(boundingBox) [81] std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  [75] GetWallClockTime()     [78] domain::runDelaunayMPI(int) [27] gridBound::getLowGridElement()
  [92] size(triangleNode*)    [14] domain::basicTriangulate(point) [21] gridBound::getHighGridElement()
   [8] boundingBox::getLowPoint() [9] domain::deliverTriangles() [28] gridBound::gridBound(gridElement, gridElement)
  [93] boundingBox::setLowPoint(point) [35] domain::triangleTransform() [72] partition::partition()
   [6] boundingBox::getHighPoint() [3] domain::updateTriangleArr() [73] partition::~partition()
  [94] boundingBox::setHighPoint(point) [1] domain::generateIntersection() [71] std::list<unsigned int, std::allocator<unsigned int> >::sort()
  [23] boundingBox::boundingBox(point, point) [19] domain::storeActiveParitions(int*, int, unsigned int) [25] std::list<unsigned int, std::allocator<unsigned int> >::operator=(std::list<unsigned int, std::allocator<unsigned int> > const&)
  [34] boundingBox::boundingBox(double, double, double, double) [95] domain::readPointPartFileInfo() [74] std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)
  [24] gridElement::getX()    [79] domain::collectStoreTriangleIds() [77] std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
  [38] gridElement::getY()    [80] domain::storeActiveParitionInfo(int, int*, int*, int*)
